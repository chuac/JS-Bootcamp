Timer app: instead of sequential code flipping back and forth between our two functionalities (countdown of timer, and animated circle), we can use event-based
	coding. where something may trigger an event and that itself will animate the circle.
	> Solving the 'this' issue. We learned new ways of using 'bind', 'call', or 'apply' to pass in an argument of 'this'. Check screenshot.

	Have 2 options on how to update the time remaining (tick). Either store the time left as an instance variable, or store it in the input element (storing inside DOM)

	SVG Elements are HTML elements. Top left corner is the Origin. X-axis increases from left to right. Y-axis increases from top to bottom. You won't have negative X/Y
		Can show multiple shapes in one SVG area
		Circles have a Fill (inside part), and Stroke (border)
		Border or stroke-dasharray, starts being drawn from the right side then goes clockwise. same as circumference (2 * PI * r)

Application Design Pattern: Plan of attack -> Setup boilerplate code -> Identify challenging aspects of the project we're about to work on -> Get started on the project
	Movie Fight app: Big challenges: Need to somehow fetch data about movies (hard-code? or API?), need auto-complete widget from scratch, styling CSS to make it nice
	APIs usually have two return actions. A Listing (Indexing) result or a Show result
	OMDb API key: e7a59c4a
	With Axios we can pass along an object with parameters for requesting the API
	Debouncing: Waiting for some time to pass after the last event to actually do something.
		A reusable debounce function wraps the initial function and gives it a "shield" to protect from requests that are too fast
	Dropdown menu has 2 implementations: #1: Have HTML for input, DIVs, etc for the dropdown, then create anchor tags in JS to append to the DIVs
		Or #2: Have one big DIV in HTML file with class="autocomplete", then we create ALL the HTML for it in JS and insert it in. Less coupling of code. Better!
		^Method #2 results in reusable code to create widgets
	contains() method can help us see if the target of what the user clicked on is inside or outside the dropdown. If outside then we close the dropdown!
	
	But code has problems with not being re-usable: Autocomplete has knowledge of what a movie object is (so can't re-use code for Recipes for example), global variables
		would make it hard to show a second autocomplete on the screen.
	We split our project into two JS files. One index.js, and one autocomplete.js. index.js will hold non-reusable code for our very specific project: it'll pass a
		config object that will pass in info for all the autocomplete.js which has methods like: fetchData(), renderOption() that knows how to render a movie, 
		onOptionSelect() that is invoked when a user clicks an option of the dropdown menu, root element that autocomplete should be rendered into.
		autocomplete.js must have zero knowledge of movies or recipes or blogs. Must be able to be re-usable depending on what gets passed in.
	To compare the movies, maybe we should store the movie data when we fetch/select it.
		We inject the parsed data into the properties of each HTML article element under the data-value tag (aka dataset named value)

JS with the Canvas API: Maze game
	Matter-js: by default, gravity is enabled in our simulation
	Top left of our canvas element is (0, 0) where (x, y). X-axis goes horizontally to the right, Y-axis goes vertically downwards
	Put a rectangle at all 4 edges of the World to create a border.
	Our maze generations are using a 2D Array
		'grid' array will keep track of which cell has been visited: 'false' means not visited before
		'verticals' array will keep track of walls going up and down, 'horizontals' array will keep track of walls going side to side
			a value of 'true' means there's no wall there, a 'false' means there is a wall
	Iterate over our verticals and horizontals array, and draw a rectangle (wall) at every false value

Secret Message Sharing app: using Base64 character encoding to make it seem like a garbled secret message. in JS use: btoa() then atob()
	URLs have 4 sections: domain, path, Query String, Hash/fragment
		The Query String section is sent to the backend server. The Hash fragment only concerns the browser

Node: Run 'node index.js' in Command Line Interface, or type 'node' to get into the Node REPL and then run JS code there (acts like the Console in browser)
	Code cannot be naturally shared between .js files. Use module.export and require().
	Our code gets passed in 5 "invisible" arguments: exports, require, module, __filename, __dirname. Display them by console.log(arguments);
	Require Cache: We only ever execute a file ONE TIME. Whatever you export from that file one-time into the cache is what you'll reference. require.cache
		A second require statement won't run myscript.js again. You get the exact copy from the cache, from the first require statement.
	Debugging: Run 'node --inspect-brk index.js'  and then access it with Chrome at 'chrome://inspect'
	Node functions that take a callback always return the first argument as an error object, then the actual data in the second or third arguments
	process.cwd() for current working directory has better cross-platform support, even though it works just like a '.' dot for path

	package.json : create using npm init -y . Records some info about your project, 2 important sections: the "scripts" section and "dependencies" section.
		Add a "bin" section, and declare what your program name is going to be, like "nls" for our ls-clone.
		Run 'npm link' to link the project to everywhere on the computer

	use fs.lstat to figure out if file vs folder.
		Watch out because Node invokes callbacks (eg, in a for each loop) but it may take time for the hard drive to return those callback functions, meaning our
			ouput could be in random order. Not good!
		3 options on a proper implementation. 2 sub-optimal, 1 preferred.
			Option #2: could wrap lstat in Promise traditionally, or Node's util.promisify(), or even easier: using FsPromises.
				BUT Option #2 runs in serial! Only one lstat call at a time. No parallel performance
			Option #3: Promise.all to run in parallel
		Use Chalk library to console.log in colour

	Steps to link a .js file as a terminal executable: Add '#!/usr/bin/env node' comment to top of .js file, run 'npm init -y' in terminal, add a 'bin' object to 
		the newly created package.json. The bin object will contain a key of name of your executable, and value of your .js file name.
	
	Watch-it project runner app: 3 implementation issues: Need to detect when file changes, would be nice for CLI help for new users of our tool, how to execute
		JS code from within a JS program?
		Use Chokidar and Caporal packages from NPM, for issue #1, and #2. Child Processes Node module for issue #3.
		Chokidar detects an add event for every single file it finds when it first runs. So we need a debouncer to prevent so many executions on first run.
		Caporal: options or arguments in <> angled brackets are mandatory, [] square brackets optional
			The command 'watchit -h' can be used straight away to see the help page
		Child Processes: exec(), execFile(), fork(), spawn() are all very very similar.
			The spawn() function takes an options object named 'stdio'. Stdio supports a string 'inherit' where all console.logs/errors created by the
				child process will be inherited back to the parent program.
			spawn() returns a ChildProcess object that has methods attached to it, like kill()

Ecommerce app: Inside "scripts" of package.json, add a key called "dev" and value of how the code would be executed...like "nodemon index.js". Then run 'npm run dev'
	Methods of requests are intents. Like GET
	Express is a router. Works with browser and if the response you're returning looks like HTML (template string literal), the browser will treat it as such
	When making POST requests, the Request Body instead takes the form data, instead of in the URL
	Middleware! : Function that does pre-processing on the 'req' and 'res' objects. Allows code re-use in Express. They are functions that are in the middle of a 
		request handler.
		Before using bodyParser middleware, we access form data like req.on('data', (data) => console.log(data) );
	Custom database: Users repository and Products repository. A repository will be a single Class that is the gatekeeper responsible for data access. It'll have methods
		like getByID(), getAll(), delete(), etc. All data is stored as plain JS objects, in a .json file
	Constructor functions in JS Classes aren't allowed to be async. Since we're only creating the repo once, we can use "sync" version of fs.accessSync()
	Best practice to export an Instance of the Class, instead of the whole file. Like module.exports = new UsersRepository('users.json');

	Cookies: After an initial request from the browser to server, the server can return a response with a cookie. Tells the browser to please include the cookie
		with every followup request
		We don't want to allow a user to be able to modify their cookie and pretend that they are someone they're not.
	
	Project re-structure: create a sub-router into other routes files

	Public directory available to the entire world, like fonts, css, etc
	When you use an express.static middleware, express actually looks into the static folder declared *every time* a request is made to see if a route file is there first.

	HTML Forms have an enctype. Specifies how we want the form data to be encoded. URLencoded vs. enctype="multipart/form-data" for images

	4 ways to serve images (worse to best): #1: Co-located disk, image file on the hard disk of that one server. Doesn't work for multi-server approach
						#2: Storing the actual image on the database, and since db is shared between few servers, not good as DB storage is expensive.
						#3: Data store like Amazon S3. the images uploaded still flows into our server and they need to process it to upload to S3.
						#4: Presigned URL is given to the user from our server and the browser can use the URL to directly upload the image to S3.
	There is an order to which middlewares are run, from the ones declared in index.js, then left to right

	Our product delete button will be wrapped around a form, instead of just anchor tag. So we can POST the request.

	Shopping cart: Problem #1: How do tie a cart to a user that's never logged in?
					Build a cart in the backend, store the cart ID in a user's cookies
			Problem #2: How to associate a cart with number of products?
					Carts repo holding just item IDs and quantity of each item
		The Add to Cart button is in the <footer> of each product, at products index page. This button is wrapped in a form
			with POST action, and has the item ID added to the URL. OR we could do a hidden input that sends a value
			of the product ID (with name="productId"). We can then access this in routes under req.body.productId .

Testing: some people spend more time setting up testing than actually writing tests, all frameworks essentially the same, no framework
	even needed!
	By naming convention, if you want to test a file named index.js, your tests should be in index.test.js.
	Maybe we write a test first before writing our code.
	Why use testing frameworks? They help with global scopes of our variables, Errors thrown by one failure wouldn't stop other code,
		Easier to find where the error occured.
	Use JS library Assert module instead of if-statements.
	Install Mocha globally using 'npm install -g mocha'




12:10