`Adding two numbers results in: ${2 + 5}` // "Adding two numbers results in: 7". STRING TEMPLATE LITERALS

Math.floor(Math.random() * 10) + 1 // Generate random number from 1 to 10

parseInt() and parseFloat()

Always use strict equality '===' and also non equality '!=='

array.sort() is not a numeric sort!!

Arrays and Objects are stored as "Reference types". Stores a reference to where that array is in memory (points)...compared to primitive types

Use const with arrays...because we always want the pointer to stay the same (don't want to point to new array)

Objects are like Dicts in Python. Use dot notation or square brackets to access key:value pairs
(student['exams']['midterm'] + student['exams']['final']) / 2

for..of loops. example: for (let sub of subreddits) {}

Iterating over Objects -> Object.keys(obj) or Object.values(obj)  will return an array of keys or values, respectively
..or use for..in loops to loop over keys. example: for (let key in subreddits) {}

'let' and 'const' has different scoping compared to 'var'. Function scoping (var) vs Block scoping (let, const)

Multiple ways to create/define a function, could store them as a variable too!..because functions are also objects

Functions can be return values of other functions. "Function factories"

Functions and vars are "hoisted", but not let and const

Callbacks

Map - creates a NEW array with the results of calling a callback on every element in the array

Arrow functions: Behaves just like function expression, leaner syntax. parenthesis optional around one parameter, use empty parenthesis for no parameter. 

Array.find used often. finds the first occuring then stops straight away!

Filter can be used to find all occurances in an object then put them in a new object. Like a search function on a website

Every: has to return true for EVERY single element (according to the equality we give it), for it to return true
Some: similar to Every BUT returns true if ANY of the elements pass the equality test we give it.

Sort revisited. Sort with an arrow function inside doesn't create a new copy of array. Mutates original array! Use .slice() to create a new copy array

Reduce: executes a reducer function on each element of the array, resulting in a single value. We can set the accumulator to have a different starting value (like an object!)

Function parameters can also be set to default value if undefined (that parameter wasn't passed into it).

Spread: ...  3 dots
For function calls: spread something (most commonly an array) into a function call, each element in your array is passed into the function as a standalone argument.
For array literals: make new array with copies of these spread'ed out arrays inside.
For object literals: make new object with copies of the properties from these spread'ed out objects, inside. Can't spread object into an array. "Duplicate" properties
	just take on whichever property was brought in last.

Rest Parameters: collect all (infinite) parameters and have them in an actual array object (unlike traditional 'arguments' array-like object).
	Rest collects just all the "unclaimed" parameters, so it works cleanly when you're declaring multiple defined parameters too.

Destructuring: clean syntax to unpack values from arrays, and properties from objects.... all into distinct variables
	Can also destructure parameters. quite helpful

Shorthand Object properties: When we want to create a new object and the key and variable are going to be the using the same name.

"Computed" Object properties: We can use a variable as a key name in an object literal.

METHODS: When we add functions as properties on objects...we call them methods!
	There is shorthand available when declaring these methods inside objects.
	Generally don't use arrow functions to create methods because of how it behaves with the 'this' keyword.

THIS: returns an object that is a reference to the current execution scope.
	let and const are not added to the scopes (aka window, sometimes)...but var is
	The value of this will change depending on how the function is actually executed. Not just where you write it! AKA Invocation Context.
	>> Rule of thumb: if you're calling it using dot notation, the scope will be what object is on the left of the dot. If no dot then the scope is the global window
	Using an arrow function to create method gives different behaviour. Arrow functions don't get their own this! They get their parent function's 'this'


CSS: need to know how to select elements, .class, #id, attributes (which is like input[type="password])
	AN element can only have one ID but can have multiple classes
	Can combine selectors

Documents have tons of built in methods...like getElementById. null if no matching id, returns first match if not unique ids
	getElementsByTagName (all the types of elements, like paragraph, h1, etc). returns array-like object, containing element objects. still iterable though
	getElementsByClassName by elements' classes. also returns array-like object, even if only one element found

querySelector(): newer, all-in-one method to select a SINGLE element. uses CSS selectors like # for ids, . dots for classes, etc. 
	Can stack selectors like document.querySelector('li.className') to find the first instance of a list item that has class of className.
	Even using CSS attribute selector like document.querySelector('input[type="password]')
querySelectorAll(): ^ same as above but a collection of all matches. also returns an array-like object

innerText vs textContent: innerText is "aware" of what is going to be rendered on the actual webpage. textContent doesn't care at all.
innerHTML: returns a string with all the elements inside, including the HTML tags! ALL of the content

HTML Attributes: we can manipulate these with JS through the DOM. like for inputs (value, checked), href, src
	getAttribute()
	setAttribute( , ) replaces the current class with what we give it...not desirable
	
Parent/Children/Siblings: parentElement, children, nextElementSibling, previousElementSibling

Property names in JS/DOM are all camelCased. not kabob-cased

Style property: can use to change style properties of an element BUT we can't use it to read existing styles (unless they were defined in-line)
	getComputedStyle gives all existing styles, at the time the object (that was returned from getComputedStyle) is called!

classList: has convenient methods like add, remove, toggle which are better to use than setAttribute when manipulating classes

Creating and Adding elements: createElement()  put a string like 'img' inside the parentheses to create an <img></img> element
	appendChild() select an element and append a new element to this element as a child
	insertBefore(newElement, existingElement) cumbersome syntax
	insertAdjacentElement() not as popular, check MDN for syntax
	append(), and prepend() similar to appendChild() but now the method takes multiple elements to add

Removing: removeChild() supported on IE, but requires parent to be called on, just like appendChild()
	remove() newer but simpler because it doesn't require you to call it on the parent object.

Events: follow a general flow/pattern: we have a thing (element), event type, then the code to run.
	eg. button, click, change the colour
	input, hits return, get search results
	image, mouseover, display the img caption
	
2 ways NOT to add events: in-line with elements, 
			selecting an element by ID in JS then setting it's onclick value/property to your function (that contains your code to run)
	Why? Not clean but also because there's no way for an element to listen to multiple events.

addEventListener is used instead. Doesn't set the onclick property on an element, but attaching listeners (unlimited amount, for any type of event)
	can add multiple of the same eventListeners in a loop, etc to multiple elements

Event Object: automatically passed into the function of your addEventListener. capture it in your function, normally named "e" or "evt"

Key down or up (keydown, keyup) runs no matter if they change the input at all. Meaning they also register buttons like Shift, CAPS Lock, etc
	Key press (keypress) only runs when key usage changes input (character keys)...but also Enter key!

Form Events and preventDefault: select a form, add a listener on the submit, then do anything you want with the form data. using e.preventDefault() will stop the form
	from forwarding to the next page!

Input and Change Events: don't need to wait for user to click submit, can grab what they enter using 'input' event to have in-sync representation of what user has in the form.
	'input' will always update whenever there's new characters, 'change' only updates when user changes focus (like finished typing text then clicked out)

Call Stack: how JS keeps track of its place in a script that calls multiple functions. Unless a function returns a value, it's added to the stack and that's run first. FIFO
	You can use the Dev Tools to add a breakpoint and step through the Call Stack to debug

JS is single threaded! Can only do one thing at a time. Can send a request but it'll wait until it returns with data until it continues.
	Fortunately, our web browsers handle things that take time (like setTimeout, eventListeners, requests) then pass what needs to be done back to the JS call stack.
	More exactly: When the time is up, the "Web APIs" of our browsers place the function into the "Callback queue", then JS draws from that and adds it to the Call Stack.

getBoundingClientRect()

Using callbacks: when you have two callbacks (success, failure) it can get messy very quickly (Callback Hell). Promises solves this!

Promises: a JS object that represents the eventual completion or failure of some task (a task that would take time).
	We can attach callbacks to a promise, instead of passing callbacks into a function.
	PromiseStatus is "pending" until it is "resolved" or "rejected"
	We can return promise objects from functions, and also chain then() and catch()



11:25